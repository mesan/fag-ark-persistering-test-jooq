/**
 * This class is generated by jOOQ
 */
package no.mesan.ark.persistering.generated.tables.daos;


import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import no.mesan.ark.persistering.generated.tables.FilmActor;
import no.mesan.ark.persistering.generated.tables.records.FilmActorRecord;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FilmActorDao extends DAOImpl<FilmActorRecord, no.mesan.ark.persistering.generated.tables.pojos.FilmActor, Record2<Integer, Integer>> {

	/**
	 * Create a new FilmActorDao without any configuration
	 */
	public FilmActorDao() {
		super(FilmActor.FILM_ACTOR, no.mesan.ark.persistering.generated.tables.pojos.FilmActor.class);
	}

	/**
	 * Create a new FilmActorDao with an attached configuration
	 */
	public FilmActorDao(Configuration configuration) {
		super(FilmActor.FILM_ACTOR, no.mesan.ark.persistering.generated.tables.pojos.FilmActor.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Record2<Integer, Integer> getId(no.mesan.ark.persistering.generated.tables.pojos.FilmActor object) {
		return compositeKeyRecord(object.getActorId(), object.getFilmId());
	}

	/**
	 * Fetch records that have <code>actor_id IN (values)</code>
	 */
	public List<no.mesan.ark.persistering.generated.tables.pojos.FilmActor> fetchByActorId(Integer... values) {
		return fetch(FilmActor.FILM_ACTOR.ACTOR_ID, values);
	}

	/**
	 * Fetch records that have <code>film_id IN (values)</code>
	 */
	public List<no.mesan.ark.persistering.generated.tables.pojos.FilmActor> fetchByFilmId(Integer... values) {
		return fetch(FilmActor.FILM_ACTOR.FILM_ID, values);
	}

	/**
	 * Fetch records that have <code>last_update IN (values)</code>
	 */
	public List<no.mesan.ark.persistering.generated.tables.pojos.FilmActor> fetchByLastUpdate(Timestamp... values) {
		return fetch(FilmActor.FILM_ACTOR.LAST_UPDATE, values);
	}
}
